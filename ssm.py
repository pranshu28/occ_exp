import numpy as np
# import matplotlib.pyplot as plt
import math
import pandas as pd
import statsmodels.api as sm
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
from scipy.fftpack import fft, ifft
from scipy import signal


def sample(a, m, steps):
	from statsmodels.tsa.arima_process import ArmaProcess
	MA = ArmaProcess(np.array(a), np.array(m))
	print a, m
	return [MA.generate_sample(nsample=steps)]


abn = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
        2047, 2047, 2047, 2047, 2047, 365, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 950, 1113, 1125, 1128,
        1129, 1131, 1132, 1133, 1134, 1134, 1136, 1136, 1136, 1137, 1137, 1139, 1139, 1139, 1140, 1140, 1140, 1139,
        1140, 1139, 1139, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141, 1142, 1141, 1140, 1140,
        1140, 1141, 1140, 1136, 1136, 1136, 1140, 1139, 1140, 1138, 1138, 1140, 1140, 1140, 1142, 1142, 1142, 1143,
        1143, 1142, 1143, 1142, 1144, 1144, 1144, 1145, 1147, 1149, 1149, 1151, 1151, 1152, 1153, 1154, 1154, 1154,
        1153, 1153, 1153, 1152, 1151, 1152, 1152, 1153, 1153, 4, 1, 1, 1, 1, 1, 1, 1, 1],
       [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -12, -11, -12, -11, -11, -11, -11, -11, -12, -12, 940,
        1161, 1070, 980, 888, 834, 788, 761, 741, 722, 711, 701, 693, 84, -11, -11, -11, -11, -11, -11, -11, -11, -11,
        -12, -11, -11, -12, -12, -12, -11, -11, 754, 947, 956, 957, 957, 960, 960, 960, 960, 960, 962, 963, 963, 964,
        965, 967, 967, 968, 969, 969, 969, 969, 970, 969, 969, 970, 971, 972, 972, 972, 972, 973, 973, 973, 973, 975,
        976, 975, 975, 975, 975, 977, 976, 971, 972, 973, 977, 977, 978, 976, 977, 979, 980, 981, 983, 984, 985, 986,
        987, 986, 988, 988, 990, 990, 991, 992, 995, 998, 998, 1001, 1003, 1003, 1004, 1007, 1007, 1008, 1007, 1008,
        1008, 1007, 1007, 1008, 1008, 1009, 1009, -9, -11, -11, -11, -11, -12, -11, -12, -11],
       [-1, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, -70, -47, -34, -30, -27, -26, -24, -24,
        -23, -22, -22, -22, -20, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, -1, 0, -61, -89, -92, -93, -93,
        -94, -94, -94, -95, -95, -96, -96, -96, -96, -96, -97, -97, -97, -98, -98, -98, -98, -98, -98, -98, -98, -98,
        -98, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99,
        -99, -99, -99, -99, -100, -100, -100, -100, -99, -100, -100, -100, -100, -99, -100, -100, -100, -100, -100,
        -100, -100, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, 0, 0, 0,
        0, 0, -1, 0, 0, 0],
       [-6, -5, -5, -5, -5, -5, -5, -5, -5, -5, -6, -6, -6, -6, -6, -6, -6, -6, -6, -5, -5, 604, 601, 602, 602, 602,
        602, 602, 602, 603, 603, 603, 603, 603, 20, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -6, -6, -5, -5, -5,
        552, 548, 548, 550, 550, 551, 551, 550, 550, 550, 550, 551, 551, 551, 551, 551, 551, 551, 551, 552, 550, 550,
        550, 550, 550, 550, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551,
        551, 551, 552, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 551, 550, 550, 550, 550, 550,
        550, 550, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 550, 550, 550, 550, 550, 550, -4, -5, -5, -5,
        -5, -5, -5, -5, -5],
       [-19, -18, -18, -18, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, 28,
        -48, -48, -49, -49, -49, -49, -49, -49, -48, -48, -48, -48, -18, -19, -19, -18, -18, -19, -19, -19, -19, -19,
        -19, -19, -19, -21, -20, -17, -17, -18, 42, -34, -47, -44, -44, -42, -42, -45, -45, -45, -46, -45, -45, -46,
        -46, -46, -46, -46, -46, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
        -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
        -45, -45, -45, -46, -46, -45, -45, -45, -45, -45, -45, -44, -45, -45, -44, -44, -45, -44, -44, -44, -45, -45,
        -45, -45, -45, -45, -45, -19, -19, -19, -19, -19, -19, -19, -19, -19],
       [70, 26, 10, 6, 6, 6, 3, 3, 3, 3, 640, 490, 1533, 1850, 2157, 2269, 2314, 2352, 2378, 2394, 2403, 2438, 2429,
        2406, 2400, 2403, 2403, 2400, 2403, 2403, 2400, 2403, 2400, 2403, 2394, 256, 96, 51, 35, 26, 16, 13, 10, 10,
        595, 806, 1123, 1286, 1334, 1360, 1382, 1382, 1386, 1389, 1389, 1389, 1392, 1392, 1389, 1392, 1392, 1392, 1392,
        1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1389, 1389, 1389, 1392, 1392, 1392, 1392, 1389, 1392, 1392,
        1392, 1389, 1392, 1392, 1389, 1389, 1389, 1389, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1389,
        1389, 1389, 1392, 1392, 1389, 1392, 1392, 1392, 1392, 1389, 1392, 1392, 1392, 1392, 1395, 1395, 1395, 1392,
        1392, 1395, 1389, 1392, 1392, 1392, 1392, 1389, 1389, 1386, 1389, 1392, 1392, 1389, 1392, 1392, 1392, 1392,
        1392, 1392, 995, 432, 400, 394, 394, 394, 394, 394, 394]]
nor = [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
        2047, 2047, 2047, 2047, 293, 3, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 981, 1174, 1202, 1201, 1204, 1211,
        1213, 1216, 1218, 1223, 1225, 1231, 1234, 1236, 1235, 1241, 1245, 1244, 1250, 1255, 1257, 1256, 1260, 1260,
        1255, 1263, 1264, 1269, 1272, 1273, 1275, 1273, 1274, 1277, 1278, 1278, 1279, 1278, 1278, 1274, 1275, 1274,
        1275, 1275, 1267, 1267, 1267, 1266, 1265, 1268, 1264, 1256, 1236, 1193, 1154, 1116, 1103, 1094, 1093, 1091,
        1092, 1090, 1090, 1091, 1089, 1089, 1088, 1090, 1092, 1092, 1090, 1088, 1090, 1090, 161, 2, 2, 2, 2, 2, 2, 2,
        2],
       [-12, -12, -12, -12, -12, -12, -11, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, 749, 953, 887,
        784, 715, 646, 603, 572, 541, 521, 501, 486, 475, 54, -11, -12, -11, -12, -12, -12, -12, -11, -12, -12, -12,
        -12, -12, -12, -12, -12, 615, 824, 872, 892, 904, 914, 917, 918, 920, 922, 920, 922, 921, 918, 912, 913, 912,
        908, 908, 908, 905, 901, 901, 897, 890, 896, 894, 897, 896, 895, 895, 892, 892, 893, 893, 892, 892, 890, 889,
        887, 889, 888, 890, 890, 885, 885, 886, 887, 887, 891, 892, 898, 914, 939, 950, 945, 942, 937, 938, 935, 936,
        933, 932, 932, 929, 927, 925, 927, 928, 927, 924, 921, 922, 921, 121, -11, -12, -11, -12, -12, -12, -12, -12],
       [0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -87, -65, -52, -45, -43, -40, -39, -38, -37,
        -36, -35, -35, -35, 0, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, 0, -54, -101, -103, -104, -104,
        -106, -106, -106, -106, -107, -107, -108, -108, -108, -108, -108, -109, -109, -109, -110, -110, -109, -110,
        -109, -109, -110, -110, -110, -110, -110, -110, -110, -110, -111, -110, -111, -111, -110, -110, -110, -110,
        -110, -110, -110, -110, -110, -110, -109, -110, -110, -110, -109, -109, -108, -107, -106, -106, -106, -106,
        -106, -106, -106, -106, -107, -106, -106, -106, -106, -107, -107, -107, -106, -106, -106, -7, 0, 0, -1, -1, -1,
        -1, 0, -1],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 609, 603, 601, 602, 602, 602, 603, 602, 603, 602, 602,
        603, 603, 28, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 558, 549, 548, 550, 550, 549, 550, 550, 551, 552,
        550, 550, 550, 550, 551, 550, 549, 549, 550, 549, 550, 550, 551, 550, 551, 551, 551, 551, 551, 551, 552, 550,
        550, 550, 551, 551, 551, 551, 551, 551, 551, 552, 551, 552, 551, 550, 550, 549, 550, 550, 549, 549, 549, 549,
        549, 550, 549, 549, 549, 549, 549, 550, 549, 549, 549, 550, 549, 550, 550, 549, 549, 549, 550, 550, 27, 3, 2, 2,
        2, 2, 2, 2, 2],
       [21, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 21, 21, 21, 81, -58, -68, -69, -67, -68, -67,
        -68, -67, -69, -71, -68, -68, 22, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 19, 20, 96, -48, -64,
        -62, -64, -69, -67, -67, -64, -64, -66, -66, -67, -66, -66, -67, -70, -70, -69, -70, -67, -68, -64, -67, -67,
        -66, -67, -66, -64, -66, -64, -66, -66, -66, -64, -64, -66, -66, -66, -64, -64, -64, -64, -64, -64, -66, -67,
        -67, -65, -66, -68, -67, -67, -65, -67, -66, -67, -67, -66, -66, -67, -66, -67, -67, -69, -65, -68, -66, -66,
        -67, -68, -67, -65, -64, 21, 22, 22, 21, 21, 21, 21, 21, 21],
       [70, 26, 10, 6, 6, 6, 3, 6, 3, 6, 618, 509, 1539, 1859, 2224, 2269, 2358, 2403, 2400, 2464, 2394, 2394, 2394,
        2397, 2397, 2400, 2400, 2397, 2400, 2400, 2403, 2403, 2397, 422, 96, 54, 38, 26, 19, 16, 13, 10, 592, 752, 1158,
        1238, 1373, 1389, 1389, 1389, 1389, 1386, 1389, 1389, 1386, 1389, 1389, 1389, 1389, 1386, 1382, 1389, 1382,
        1386, 1386, 1386, 1382, 1386, 1389, 1392, 1395, 1392, 1395, 1392, 1392, 1395, 1389, 1389, 1392, 1392, 1392,
        1392, 1389, 1392, 1392, 1389, 1395, 1392, 1389, 1389, 1389, 1389, 1389, 1386, 1389, 1395, 1392, 1389, 1392,
        1392, 1392, 1395, 1389, 1389, 1389, 1386, 1392, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1389, 1389, 1386,
        1382, 1386, 1386, 1389, 1386, 1386, 1386, 448, 400, 390, 390, 390, 390, 390, 390]]


def testUCMmodels(data, args):
	levels = ['irregular', 'fixed intercept', 'deterministic constant', 'local level', 'random walk', 'fixed slope',
	          'deterministic trend', 'local linear deterministic trend',
	          'random walk with drift', 'local linear trend', 'smooth trend', 'random trend']
	best = []
	for ind, row in enumerate(data):
		# print "\n\n", ind+1, "\n"
		scores = {}
		for i in levels:
			try:
				model = sm.tsa.UnobservedComponents(row, i, **args)
				result = model.fit(maxiter=1000, disp=False)
				scores[i] = math.sqrt(mean_squared_error(row, result.predict()))
			except:
				pass
		newd = sorted(scores.iteritems(), key=lambda (k, v): (v, k))
		for key, value in newd:
			print "%s: %s" % (key, value)
		best.append(newd[0][0])
	return best


# random walk: 1 2 3 4 6
# local level: 5


def statspace(inp, test=False):
	args = {"seasonal": 360}
	levels = testUCMmodels(inp, args) if test else ['local level'] * len(inp)
	for ind, row in enumerate(inp):
		# dec = sm.tsa.seasonal_decompose(data, freq=30)
		# model = sm.tsa.SARIMAX(row, order=(4, 0, 4), trend='c')
		# result = model.fit()
		# figure = dec.plot()

		# model = sm.tsa.UnobservedComponents(row, levels[ind], **args)
		# result = model.fit(maxiter=1000, disp=None)
		model = ARIMA(row, order=(1, 1, 1))
		result = model.fit()
		pred = result.predict()
		# rmse = math.sqrt(mean_squared_error(row, pred))
		print pred
		pred = np.append(pred, result.forecast(steps=100))
		# result.plot_diagnostics()
		# result.plot_predict(start=1, end=127)

		print "\n\n", result.summary()
		# print "\n\nRMSE:", rmse
	# plt.plot(row)
	# plt.plot(pred)
	# plt.plot(model.simulate(result.params, len(inp[0])))
	# plt.legend(['Actual', 'Predicted'])
	# plt.title('Level: ' + levels[ind])
	# plt.show()


def fourier(inp):
	y = fft(inp)[0]
	# yinv = ifft(y)
	# freq = np.linspace(0, 1 / T, N)
	N = len(inp[0])
	freq = np.linspace(0, 100, N)
	# freq = np.fft.fftfreq(N)
	# plt.figure(1)
	# plt.plot(inp[0])
	plt.figure(2)
	# f, t, Sxx = signal.spectrogram(inp[0], N)
	# plt.pcolormesh(t, f, Sxx)
	plt.plot(freq[:N // 2], np.abs(y)[:N // 2] / N)
	plt.show()


google = pd.read_csv('GOOGL_2006-01-01_to_2018-01-01.csv.xls', index_col='Date', parse_dates=['Date'])
data = [google["Close"].values]
# data = sample([1,-0.5],[1],1000)

statspace(data, False)
# fourier(data)
